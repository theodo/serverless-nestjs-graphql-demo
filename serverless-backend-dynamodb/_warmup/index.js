"use strict";

/** Generated by Serverless WarmUp Plugin at 2019-06-12T14:56:22.208Z */
const aws = require("aws-sdk");
aws.config.region = "eu-west-3";
const lambda = new aws.Lambda();
const functions = [{"name":"nest-graphql-poc-dev-api","config":{"enabled":true,"payload":"{\"source\":\"serverless-plugin-warmup\"}","concurrency":1}},{"name":"nest-graphql-poc-dev-pubsub","config":{"enabled":true,"payload":"{\"source\":\"serverless-plugin-warmup\"}","concurrency":1}}];

module.exports.warmUp = async (event, context) => {
  console.log("Warm Up Start");
  
  const invokes = await Promise.all(functions.map(async (func) => {
    console.log(`Warming up function: ${func.name} with concurrency: ${func.config.concurrency}`);
    
    const params = {
      ClientContext: Buffer.from(`{"custom":${func.config.payload}}`).toString('base64'),
      FunctionName: func.name,
      InvocationType: "RequestResponse",
      LogType: "None",
      Qualifier: process.env.SERVERLESS_ALIAS || "$LATEST",
      Payload: func.config.payload
    };
    
    try {
      await Promise.all(Array(func.config.concurrency).fill(0)
        .map(async _ => await lambda.invoke(params).promise()))
      console.log(`Warm Up Invoke Success: ${func.name}`);
      return true;
    } catch (e) {
      console.log(`Warm Up Invoke Error: ${func.name}`, e);
      return false;
    }
  }));

  console.log(`Warm Up Finished with ${invokes.filter(r => !r).length} invoke errors`);
}